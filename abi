#!/usr/bin/env bash

########################
# Author: Shinichi Okada
# Date: 2021-05-26
# abi (Automate Brew Install)
###########################

# set -e The set -e option instructs bash to immediately exit if any command [1] has a non-zero exit status.

set -e

version="0.0.4"
script_name=$(basename "$0")
type=""
install_type=""
list_description="My brew list"
cask_description="My brew cask list"
list_filename="my-brew-formula"
cask_filename="my-brew-cask-formula"
visibility="-p"
url=""

usage() {
    cat <<EOF
Name: 
=====
$script_name

Description: 
============
This script creates a Gist from your Homebrew formula or cask. It can install Homebrew formula or cask from the Gist.

Requirement:
============

brew
gh


Usage:
======
./$script_name [ -l | --leaves ] [ -c | --cask ] [ -i | --install ] [ -j | --caskinstall ][ -v | --version ] [ -h | --help ] 
    -d | --description Gist description. Default: "My brew list" or "My brew cask list"
    -f | --filename    Gist file name. Default: "my-brew-formula" or "my-brew-cask-formula"
    -s | --secret      Gist visibility. Default: -p (Public)
    -v | --version     Script version.
    -l | --leaves      Create a Homebrew formula Gist      
    -c | --cask        Create a Homebrew cask formula Gist
    -i | --install     Install Homebrew formula and taps from a Gist
    -j | --installcask Install Homebrew cask formula from a Gist 
    -u | --url         Gist URL
    -h | --help        Show help.

Examples:
=========

    Create a Homebrew formula Gist with the file name and description. 
    $script_name -l

    Create a Homebrew cask formula Gist with the file name and description. 
    $script_name -c

    Create a Homebrew Gist with your description and file name.
    ${script_name} -l -d "my new brew list" -f hello-brew
    $script_name -c -d "my new brew cask list" -f hello-cask-brew
    
    Install Homebrew formula from a Gist
    $script_name -i -u <Gist-URL>

    Install Homebrew cask formula from a Gist
    $script_name -j -u <Gist-CASK-URL>

    Get help
    $script_name -h

    Get version
    $script_name -v

EOF
    exit 2
}

while (($# > 0)); do
    case $1 in
    -d | --description)
        list_description="${2}"
        cask_description="${2}"
        shift 2
        ;;
    -f | --filename)
        list_filename="${2}"
        cask_filename="${2}"
        shift 2
        ;;
    -s | --secret)
        visibility=""
        shift 1
        ;;
    -v | --version)
        echo "$version"
        exit
        ;;
    -l | --leaves)
        type="leaves"
        shift 1
        ;;
    -c | --cask)
        type="cask"
        shift 1
        ;;
    -i | --install)
        install_type="list"
        shift 1
        ;;
    -j | --installcask)
        install_type="--cask"
        shift 1
        ;;
    -u | --url)
        url="${2}"
        shift 2
        ;;
    -h | --help | *)
        usage
        exit
        ;;
    esac
done

check_os() {
    if ! [[ "$OSTYPE" =~ darwin* ]]; then
        echo "This is meant to be run on macOS only"
        exit
    fi
    echo "OS is good."
}

check_cmd() {
    if [[ ! $(command -v "$1") ]]; then
        echo "It seems like you don't have $1."
        echo "Please install $1 or add the PATH to .zshrc or .bash_profile."
        exit 1
    fi
    echo "${1} is installed."
}

fn_createList() {
    local list_name
    local filename
    local description
    local leav_ans

    echo "Creating a list ..."
    if [[ $1 = "cask" ]]; then
        list_name="list --cask"
        filename="${cask_filename}"
        description="${cask_description}"
    elif [[ $1 = "leaves" ]]; then
        list_name="leaves"
        filename="${list_filename}"
        description="${list_description}"
    else
        exit 1
    fi

    # -p for the public. Remove it for a secret gist.
    # -w opens the browser
    # -d for a description for the gist
    # -f for gist name

    echo "visibility ${visibility}, desc: ${description},  filename: ${filename}"
    echo
    read -rp "Do you want to create a Gist with the description: ${description}, file name: ${filename}, list: ${list_name}? yes/y or no/n   " LEAV

    echo "running ${visibility} ${filename} ${description}"
    # exit
    leav_ans=$(echo "$LEAV" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
    if [[ "${leav_ans}" = Y ]]; then
        brew ${list_name} | gh gist create -w ${visibility} "-f ${filename}" "-d ${description}"
    else
        echo "Exit."
        exit
    fi
    echo "Please save the URL."
    exit
}

create_raw() {
    regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    if [[ ${1} =~ $regex ]]; then
        if [[ $(curl --silent --head --fail "${1}/raw") ]]; then
            # echo "URL exists: ${1}/raw"
            echo $(curl -L --silent "${1}/raw")
        else
            echo "URL does not exist: ${1}"
        fi
    else
        echo "Link not valid."
    fi
}

fn_install() {
    echo "Installation started ..."
    # check url
    local install_type=${1}
    if [ $2 ]; then
        tmpfile=$(mktemp /tmp/list.XXXXXX)
        url=$2
        create_raw $url >$tmpfile
        array=($(cat $tmpfile))
        for element in "${array[@]}"; do
            # it can be taps, shellspec/shellspec/shellspec
            # shinokada/backpack_install/backpack_install, shinokada/gitstart/gitstart
            if [[ "${element}" == *"/"* ]]; then
                # echo "${element} has /."
                # var="a/b/c"; echo ${var#*/} is b/c... echo ${var##*/} returns c
                # https://stackoverflow.com/questions/9532654/expression-after-last-specific-character
                # parameter expansion
                tap_name="${element%/*}" # output a/b
                formula="${element##*/}" # output c
                echo "Running tap ${tap_name}"
                # echo "${formula}"
                brew tap ${tap_name}
            else
                formula=${element}
                # brew install <formula> doesn't need install_type
                install_type=""
            fi
            echo "Installing ${install_type} ${formula}"
            brew install ${install_type} "${element}" || exit 1
        done
        rm "${tmpfile}"
        exit
    else
        echo "Please provide your list URL."
        exit 1
    fi
}

main() {
    [[ ! -z $type ]] && fn_createList $type
    [[ ! -z $install_type ]] && fn_install $install_type $url
}

echo "Checking OS ..."
check_os
echo "Checking Homebrew ..."
check_cmd brew
echo "Checking Github CLI, gh ..."
check_cmd gh
main "$@"
echo "Task completed."
exit
