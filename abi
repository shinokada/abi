#!/usr/bin/env bash

########################
# Author: Shinichi Okada
# Date: 2021-05-26
# abi (Automate Brew Install)
###########################

# set -e The set -e option instructs bash to immediately exit if any command [1] has a non-zero exit status.

set -e

version="0.1.0"
script_name=$(basename "$0")
type=""
install_type=""
list_description="My brew list"
cask_description="My brew cask list"
list_filename="my-brew-formula"
cask_filename="my-brew-cask-formula"
visibility="secret"
url=""

abort() {
    echo "$*" >&2
    exit 1
}
required() { [ $# -gt 1 ] || abort "option '$1' requires an argument"; }

usage() {
    cat <<EOF
Name: $script_name

Description: This script creates a Gist from your Homebrew formula or cask. It can install Homebrew formula or cask from the Gist.

Requirement:
brew
gh


Usage: ./script_name [command [--option <argument>]...] 
./$script_name leaves [ -d <description> ][ -f <file name> ][-p]
./$script_name cask [ -d <description> ][ -f <file name> ][-p]
./$script_name install <Gist-url>
./$script_name installcask <Cask-Gist-url>

Options:
    -d | --desc      Gist description. [default "My brew list" | "My brew cask list"]
    -f | --filename  Gist file name. [default "my-brew-formula" | "my-brew-cask-formula"]
    -p | --public    Gist visibility. [default secret ]
    -h | --help      Show help.
    -v | --version   Script version.

Examples:

    Create a Homebrew formula Gist with the file name and description. 
    $script_name leaves

    Create a Homebrew cask formula Gist with the file name and description. 
    $script_name cask

    Create a Homebrew Gist with your description and file name.
    $script_name leaves -d "my new brew list" -f hello-brew
    $script_name cask -d "my new brew cask list" -f hello-cask-brew

    Use -s if you want a secret Gist
    $script_name leaves -s
    $script_name cask -s

    Install Homebrew formula from a Gist
    $script_name install -u <Gist-URL>

    Install Homebrew cask formula from a Gist
    $script_name installcask -u <Gist-CASK-URL>

    Get help
    $script_name -h

    Get version
    $script_name -v

EOF
    exit 2
}

while (($# > 0)); do
    case $1 in
    -d | --description)
        list_description="${2}"
        cask_description="${2}"
        shift 2
        ;;
    -f | --filename)
        list_filename="${2}"
        cask_filename="${2}"
        shift 2
        ;;
    -p | --public)
        visibility="public"
        shift 1
        ;;
    leaves)
        type="leaves"
        shift 1
        ;;
    cask)
        type="cask"
        shift 1
        ;;
    install)
        install_type="list"
        required "$@" && shift
        url="$1"
        # url="${2}"
        shift
        ;;
    installcask)
        install_type="--cask"
        required "$@" && shift
        url="$1"
        shift
        ;;
    -v | --version)
        echo "$version"
        exit
        ;;
    -h | --help | *)
        usage
        exit
        ;;
    esac
done

check_os() {
    if ! [[ "$OSTYPE" =~ darwin* ]]; then
        echo "This is meant to be run on macOS only"
        exit
    fi
    echo "OS is good."
}

check_cmd() {
    if [[ ! $(command -v "$1") ]]; then
        echo "It seems like you don't have $1."
        echo "Please install $1 or add the PATH to .zshrc or .bash_profile."
        exit 1
    fi
    echo "${1} is installed."
}

fn_createList() {
    local list_name
    local filename
    local description
    local leav_ans

    echo "Creating a list ..."
    if [[ $1 = "cask" ]]; then
        list_name="list --cask"
        filename="${cask_filename}"
        description="${cask_description}"
    elif [[ $1 = "leaves" ]]; then
        list_name="leaves"
        filename="${list_filename}"
        description="${list_description}"
    else
        exit 1
    fi

    # -p for the public. Remove it for a secret gist.
    # -w opens the browser
    # -d for a description for the gist
    # -f for gist name

    # echo "visibility ${visibility}, desc: ${description},  filename: ${filename}"
    echo
    read -rp "Do you want to create a Gist, description: ${description}, file name: ${filename}, list: ${list_name}, visibility ${visibility}? yes/y or no/n   " LEAV

    # echo "running ${visibility} ${filename} ${description}"
    # exit
    leav_ans=$(echo "$LEAV" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")
    if [ "$visibility" = "secret" ]; then
        visi_opt=""
    else
        visi_opt="-p"
    fi
    echo "visopt: $visi_opt"
    # exit
    if [[ "${leav_ans}" = Y ]]; then
        echo "Starting..."
        # brew $list_name >/tmp/abi.txt
        # cat /tmp/abi.txt | gh gist create -w "$visopt" "-f $filename" "-d $description"
        # echo "-f \"${filename}\"" "-d \"${description}\"" "$visi_opt"
        # exit
        brew ${list_name} | gh gist create -w "-f \"${filename}\"" "-d \"${description}\"" "$visi_opt"
    else
        echo "Exiting..."
        exit
    fi
    echo "Please save the URL."
    exit
}

create_raw() {
    regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    if [[ ${1} =~ $regex ]]; then
        if [[ $(curl --silent --head --fail "${1}/raw") ]]; then
            # echo "URL exists: ${1}/raw"
            echo $(curl -L --silent "${1}/raw")
        else
            echo "URL does not exist: ${1}"
        fi
    else
        echo "Link not valid."
    fi
}

fn_install() {
    echo "Installation is starting ..."
    # check url
    install_type=$1
    # echo "install_type: $install_type"
    # exit
    if [ -n "$2" ]; then
        tmpfile=$(mktemp /tmp/list.XXXXXX)
        url=$2
        create_raw "$url" >"$tmpfile"
        array=($(cat "$tmpfile"))
        # echo "${tmpfile}"
        for element in "${array[@]}"; do
            # it can be taps, shellspec/shellspec/shellspec
            # shinokada/backpack_install/backpack_install, shinokada/gitstart/gitstart
            if [[ "${element}" == *"/"* ]]; then
                # var="a/b/c"; echo ${var#*/} is b/c... echo ${var##*/} returns c
                # https://stackoverflow.com/questions/9532654/expression-after-last-specific-character
                # parameter expansion
                tap_name="${element%/*}" # output a/b
                formula="${element##*/}" # output c
                echo "Running tap ${tap_name}"
                echo "Tapping a formula ${tap_name}"
                brew tap "${tap_name}"
            else
                formula=${element}
                # brew install <formula> doesn't need install_type
                if [ "$install_type" = "list" ]; then
                    install_type=""
                fi
            fi
            echo "Installing $install_type ${formula} ..."
            brew install $install_type "${formula}" || exit 1
        done
        rm "${tmpfile}"
        exit
    else
        echo "Please provide your list URL."
        exit 1
    fi
}

main() {
    [[ -n $type ]] && fn_createList $type
    [[ -n $install_type ]] && fn_install "$install_type" "$url"
}

# echo "Checking OS ..."
# check_os
echo "Checking Homebrew ..."
check_cmd brew
echo "Checking Github CLI, gh ..."
check_cmd gh
main "$@"
echo "Task completed."
exit
